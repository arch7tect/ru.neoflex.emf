package ru.neoflex.emf.bazi

import ru.neoflex.emf.bazi.natalChart.NatalChartFactory
import ru.neoflex.emf.bazi.natalChart.NatalChart
import ru.neoflex.emf.bazi.natalChart.InputParams
import ru.neoflex.emf.bazi.calendar.Calendar
import ru.neoflex.emf.bazi.calendar.CalendarFactory
import ru.neoflex.emf.bazi.calendar.CalendarPackage
import ru.neoflex.emf.bazi.calendar.BaZiDate
import ru.neoflex.emf.restserver.DBServerSvc
import ru.neoflex.emf.base.HbTransaction
import java.util.stream.Collectors
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import ru.neoflex.emf.bazi.calendar.Year
import ru.neoflex.emf.bazi.natalChart.Pillar
import ru.neoflex.emf.bazi.natalChart.God
import ru.neoflex.emf.bazi.natalChart.Elements
import ru.neoflex.emf.bazi.calendar.impl.YearImpl
import java.util.Arrays
import ru.neoflex.emf.bazi.calendar.Month
import ru.neoflex.emf.bazi.calendar.Months
import ru.neoflex.emf.bazi.calendar.Day
import ru.neoflex.emf.bazi.calendar.Hour
import ru.neoflex.emf.bazi.natalChart.Zoo
import org.joda.time.Days
import java.util.Date
import java.text.SimpleDateFormat
import org.joda.time.format.DateTimeFormatter
import org.joda.time.format.DateTimeFormat
import org.joda.time.DateTime
import java.text.DateFormat
import java.util.ArrayList
import ru.neoflex.emf.bazi.natalChart.TimeCategory

dialect  "mvel"

global DBServerSvc dbServerSvc;
global HbTransaction tx;

//function void createCalendarPillars(HbTransaction tx) {
//    List<Elements> elements = Arrays.asList(Elements.values());
//    List<Zoo> zoo = Arrays.asList(Zoo.values());
//
//    Integer skyIndex = 1;
//    Integer zooIndex = 1;
//
//    for(int i = 0; i < 60; i++) {
//        CalendarPillar pillar = NatalChartFactory.eINSTANCE.createCalendarPillar();
//        pillar.setSky(elements.get(skyIndex));
//        skyIndex = skyIndex < 10 ? skyIndex + 1 : 1;
//        pillar.setEarth(zoo.get(zooIndex));
//        zooIndex = zooIndex < 12 ? zooIndex + 1 : 1;
//
//        Resource resource = tx.createResource();
//        resource.getContents().add(pillar);
//        resource.save(null);
//    }
//}
//
//function Calendar createCalendar(HbTransaction tx) {
//    Calendar calendar = CalendarFactory.eINSTANCE.createCalendar();
//
//    List<Elements> elements = Arrays.asList(Elements.values());
//    Integer skyIndex = elements.indexOf(Elements.WATER_YIN);
//
//
//    for(int i = 1993; i <= 2021; i++) {
//        Year year = CalendarFactory.eINSTANCE.createYear();
//        year.setName(i);
//        CalendarPillar pillar = NatalChartFactory.eINSTANCE.createCalendarPillar();
//        pillar.setSky(elements.get(skyIndex));
//        skyIndex = skyIndex < 10 ? skyIndex + 1 : 1;
//
//        year.setYear(pillar);
//        calendar.getYear().add(year);
//    }
//
//    Resource resource = tx.createResource();
//    resource.getContents().add(calendar);
//    resource.save(null);
//    return calendar;
//}
//
//function Year createCalendarYear(HbTransaction tx, Calendar calendar, Integer name) {
//    Year year = CalendarFactory.eINSTANCE.createYear();
//    calendar.getYear().add(year);
//    year.setName(name);
//    Pillar pillar = NatalChartFactory.eINSTANCE.createPillar();
//    year.setYear(pillar);
//    pillar.setGod(God.DIRECT_OFFICER);
//    pillar.setSky(Elements.EARTH_YANG);
//    Resource resource = tx.createResource();
//    resource.getContents().add(calendar);
//    resource.save(null);
//    return year;
//}

query "EObjects"
    $eObject : EObject()
end

//
//rule "Create Calendar Year"
//when
//    $inputParams: InputParams()
//    $calendar: Calendar($year: year)
//    not Year(name == $inputParams.year) from $year
//then
//    createCalendarYear(tx, $calendar, $inputParams.getYear());
//    update($calendar);
//end;
//
//rule "Create CalendarPillars"
//when
//    not CalendarPillar()
//then
//    createCalendarPillars(tx);
//end;
//
//rule "Create Calendar"
//when
//    not Calendar()
//then
//    Calendar calendar;
//    List<Resource> calendars = tx.findByClass(CalendarPackage.eINSTANCE.getCalendar());
//    if (calendars.size() > 0) {
//        calendar = (Calendar) calendars.get(0).getContents().get(0);
//    }
//    else {
//        calendar = createCalendar(tx);
//    }
//    insert(calendar);
//end;
//

function Pillar createYearPillar(BaZiDate baZiDate) {
    Pillar pillar = NatalChartFactory.eINSTANCE.createPillar();

    List<Elements> elements = Arrays.asList(Elements.values());
    Integer skyIndex = baZiDate.getChineseYear() % 10 < 4 ? baZiDate.getChineseYear() % 10 + 7 : baZiDate.getChineseYear() % 10 - 3;
    Elements sky = elements.get(skyIndex);

    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Integer earthIndex = baZiDate.getChineseYear() % 12 < 4 ? baZiDate.getChineseYear() % 12 + 9 : baZiDate.getChineseYear() % 12 - 3;
    Zoo earth = zoo.get(earthIndex);

    pillar.setSky(sky);
    pillar.setEarth(earth);
    return pillar;
}

function Pillar createMonthPillar(BaZiDate baZiDate) {
    Pillar pillar = NatalChartFactory.eINSTANCE.createPillar();

    List<Elements> elements = Arrays.asList(Elements.values());
    Integer countMonth = (baZiDate.getChineseYear() - 1) * 12 + baZiDate.getChineseMonth();
    Integer skyIndex = countMonth % 10 < 5 ? countMonth % 10 + 6 : countMonth % 10 - 4;
    Elements sky = elements.get(skyIndex);

    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Integer earthIndex = baZiDate.getChineseMonth() % 12 < 11 ? baZiDate.getChineseMonth() % 12 + 2 : baZiDate.getChineseMonth() % 12 - 10;
    Zoo earth = zoo.get(earthIndex);

    pillar.setSky(sky);
    pillar.setEarth(earth);
    return pillar;
}

//function Integer daysBetween(Date d1, Date d2){
//             return (int)( (d2.getTime() - d1.getTime()) / (1000 * 60 * 60 * 24));
//}

function Pillar createDayPillar(Integer daysBetween, Integer hour, Boolean joinedRatHour) {
    Pillar pillar = NatalChartFactory.eINSTANCE.createPillar();

    Integer correctionByTheHour = joinedRatHour && hour >= 23 && hour < 0 ? 1 : 0;

    List<Elements> elements = Arrays.asList(Elements.values());
    Integer skyIndex = daysBetween % 10 < 7 ? daysBetween % 10 + 4 : daysBetween % 10 - 6;
    Integer skyIndexCorrection = skyIndex + correctionByTheHour > 10 ? 1 : skyIndex + correctionByTheHour;
    Elements sky = elements.get(skyIndexCorrection);

    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Integer earthIndex = daysBetween % 12 < 11 ? daysBetween % 12 + 2 : daysBetween % 12 - 10;
    Integer earthIndexCorrection = earthIndex + correctionByTheHour > 12 ? 1 : earthIndex + correctionByTheHour;
    Zoo earth = zoo.get(earthIndexCorrection);

    pillar.setSky(sky);
    pillar.setEarth(earth);
    return pillar;
}

rule "Create NatalChart"
when
    $inputParams: InputParams()
    not NatalChart(inputParams == $inputParams)
then
    NatalChart natalChart = NatalChartFactory.eINSTANCE.createNatalChart();
    natalChart.setInputParams($inputParams);
    insert(natalChart);
end;

rule "Set Year Pillar"
when
    $natalChart: NatalChart()
    $baZiDate: BaZiDate()
then
    Pillar year = createYearPillar($baZiDate);
    $natalChart.setYear(year);
    update($natalChart);
end;

rule "Set Month Pillar"
when
    $natalChart: NatalChart()
    $baZiDate: BaZiDate()
then
    Pillar month = createMonthPillar($baZiDate);
    $natalChart.setMonth(month);
    update($natalChart);
end;

rule "Set Day Pillar"
when
    $natalChart: NatalChart()
    $inputParams: InputParams($joinedRatHour: joinedRatHour)
    $baZiDate: BaZiDate($daysBetween: daysBetween, $hour: hour)
then
    Pillar day = createDayPillar($daysBetween, $hour, $joinedRatHour);
    $natalChart.setDay(day);
    update($natalChart);
end;

//rule "Set BaZiDate"
//when
//    $baZiDate: BaZiDate()
//then
//    DateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
//    Date dayStart = formatter.parse("01.01.0001");
//    Date dayEnd = formatter.parse($baZiDate.getDay().toString() + "." + $baZiDate.getGregorianMonth().toString() + "." + $baZiDate.getGregorianYear().toString());
//    Integer days = daysBetween(dayStart ,dayEnd);
//    $baZiDate.setDaysBetween(days);
//    update($baZiDate);
//end;
